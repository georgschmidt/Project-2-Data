f1
f2 <- factor(c1, levels = c("a", "b"), labels = c("gut", "mittel"))
f2
f3 <- factor(c1, labels = c("gut", "mittel"))
d <- data.frame(punkte = c(13,20,15,7), geschl = c(1,1,2,2))
d[d$geschl == 2,]
d[d$geschl == 2]
d[,d$geschl == 2]
d[d$geschl == 2,]
d$geschl <- factor(d$geschl, labels = c("männl.", "weibl."))
d
tapply(d$punkte, d$geschl, max)
fx <- function(x, y=2*x, z=3*y)
{
100*x+10*y+z
}
y <- 3
fx(1)
fx <- function(x, y=2*x, z=3*y)
{
100*x+10*y+z
}
fx(1)
fx <- function(x, y=2*x, z=3*y)
{
100*x+10*y+z
}
fx(,1)
fx <- function(x, y=2*x, z=3*y)
{
100*x+10*y+z
}
fx(2)
x <- 5
fx()
x0 <- 0
x1 <- 1
x <- NULL
for (i in 1:8)
{
h <- x0+x1
x <- c(x, h)
x0 <- x1
x1 <- h
}
x
m <- matrix(1:48, nrow=6)
m
d <- as.data.frame(m)
d
sort(d, d$V5)
?mean
?mean
x <- 1:3
x
mixdata <- data.farame(x = c(rnorm(5000), rnorm(5000,4,1.5)), y = c(rnorm(5000), rnorm(5000,2,3)))
plot(mixdata)
#### Praktische Übung: ####
mixdata <- data.frame(x = c(rnorm(5000), rnorm(5000,4,1.5)), y = c(rnorm(5000), rnorm(5000,2,3)))
plot(mixdata)
plot(mixdata, cex=0.2, col="grey")
plot(mixdata, col=rgb(0,0,0,0.1), pch=19, cex=0.3)
library(lattice)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
#### Bsps zu Fragen ####
x <- matrix( 1:16, nrow=4, byrow=T)
y <- c(10,20,30,40)
M <- matrix(NA, ncol = ncol(x), nrow=nrow(x))
for (i in 1:nrow(x)) {
M[,i] <- x[,i]*y[i]
}
x*y
t(x)
t(t(x)*y)
x
y
M
t(t(x)*y)
replicate(100, sample(1:10, 5))
head(Prestige)
library(car)
head(Prestige)
attach(Prestige) #direkt auf Variablennamen zugreifen ohne $-Operator, holt aus Datensatz raus
boxplot(income ~ type, main = "Boxplot", xlab = "type", ylab = "Einkommen", col = 2:4)
fghana <- c(10,8,6,3,2,1)
ftogo <- c(12,11,11,7,6,5)
fkongo <- c(11,6,5,5,2,1)
fghana[2]-fghana[3]
yghana <- c(2,5)
fghana[yghana[1]]-fghana[yghana[1]+1]
sample(c(1,2,3), size = 5, replace = FALSE)
sample(c(1,2,3), size = 5, replace = TRUE)
sample(feed, size = 5, replace = TRUE)
alets <- rep("a", times=6)
feed <- c(alets, letters)
sample(feed, size = 5, replace = TRUE)
Round0 <- c("")
sizes <- sample(10:100, size = 5)
sizes
alets <- rep("a", times=6)
feed <- c(alets, letters)
Round0 <- c("")
sizes <- c(22,90,12,52,34)  #choosin these length randomly is not meaningful because we deliberately want subjects to experience character sequences of different lengths
for (i in 1:5) {Round0[i] <- sample(feed, size = sizes[i], replace = TRUE)
#Random Draw
#### THE LINEBREAK ISSUE ####
#inserting <wbr>
teststring <- "asdfghjklqwerzasuiopcqzeucbaejkhdafkjhkjeuvbdbcbeuskxebsjywasdjdfdidiiieddhdooaojdnfbjeaekjdfbe"
teststring1 <- strsplit(teststring, split="")
#so geht's mit letters:
lets1 <- paste0(letters,"<wbr>")  #macht einzelne Elemente
res1 <- paste(lets1, collapse="") #macht daraus gewünschtes Resultat
##THIS IS IT: #und so nur jeden vierten character ein <wbr>:
lets2 <- paste0(letters,c("","","","<wbr>"))
res2 <- paste(lets2, collapse="")
res2
#Alternative (unausgereift):
lets1 <- paste(letters,"<wbr>", collapse="")   #macht ein Elementigen Vektor
##########################################################
#####How to deal with vectors of character sequences? ####
##########################################################
easy <- c("vbnjyxbaqd","tzjqzdyfiljyag","raeuwlbauaiwayayoa")
easy
easy.m <- as.matrix(easy)
easy.m
easy.ms <- strsplit(easy.m, split="")
easy.ms
# lapply(easy.ms,paste0(easy.ms[], "&#x200b;"))
# paste0(easy.ms[[1]], "&#x200b;")
for(i in 1:length(easy.ms)) {easy.msp[[i]] <- (paste0(easy.ms[[i]], "&#x200b;"))}
easy.msp
easy.mspp <- easy.msp
for(i in 1:length(easy.msp)) {easy.mspp[[i]] <- paste(easy.msp[[i]], collapse="")}
easy.mspp
easy.v <- unlist(easy.mspp)
cat(easy.v, file="easy1.txt")
unlink("easy1.txt")
#####The real stuff from GitHub###
sequences_1 <- c("vbnjyxbaqd","tzjqzdyfiljyag","raeuwlbauaiwayayoa","ayathtvafanqaafvauaafa","aatoaqaaauapknagalbhcassnq","zzahaejpibveybaaqazaeazaduqtsa","xvuvafwuprnnowmtfdayeebulehijcnxnu","nyjamaifweilgywxevdmaybzaayalajavdtyoj","ylavjtfqnoqnzaemokigtaetkjzazaeagrbluurana","uiiublpwmvacyjaaxmuefakalvwmhzatxkaztvgapprfaa","omnglxuzajbaaaalyufkanuuippaawnbcaxuaqdnqzpvjzmxfv","aasmwtaxualrdacntsapizaaeyreuyasfxwbiqwdaaliuaaajijysa","acamdpcjpqctcanayqedbwtpdaagklisujapzqacwaqzvprpauqwhvbomy","zaaevksgamlvcaovcagahzgcgixqktazaexwauavttfrapjqjpkakadatajehw","shaqaazcebbfwarmioqrjxxtsadhxaarajdizxijoakfaanwajlbccyzyehpacynaa","sehscjeaanaskbojwjdlrecyiecmeaaawvktvxfdhrtlkyacdgiaxpaoycnjaaaqaxreok","aarrwklxwqiaaqkcbigbbcaacebraacdjyaowfbdgxceptpnaaeadkpyqaxuaacbbjnhgekppa","sakgharthapyliaaauofbasaxfagrkmixokayaaarnjppthapbnbegcawiugayozpuzaosratbeodj","iqtapxazbbakiyootkdioknsvhgoeylieaxryhprfaapaitalesclyctmwsyzifqddaklabaevuzfathbc","lppzaphuakialikxcnhaunaogddxxlgwxtdkawxnadarjbhzpunaajauwzaqavhdaafsaktmgipjaamwaaaoaz","bugasnaxiabqnsatnaatjrsmagdkajanofqavvvpvaaadlxpsmqspxfaahzzanzwuaflkurdtyfuwisnhhvzoyjaqx","bonksjtarlagnsrjazeykeaztavaaonnajxnzaaaedaakxjblbdaauzaqbayhvaiaixowiryaxjqjmyadanjrowaaagtaa","zazpanwfazwwvuacymdacaayzpvehazratpnajnucflljntaraaawbyyzysevkanfnkdjxpwplarmoaccbpnhaubiwaajcaeau","axvcdiparaaacntalafautdpnkcetmwmaamhdxoaaahmamedkgvjwpwzfamkddecchqxayqaplnzfbknafaowmaamknzpauhuunkev","wayaaajquaarraxmajorataakreqcoasbmaiaacwaawuakcvnpkazxiudburpxfkmgzsaxearqmpanrjvappyabbaajxrszifawrbhdhga","jbaajbuyoavfftgntmbwiizcaltuubfezdmmmgnviqydsausuufzcdfaaanzatjkbmouafkzwaiarsaawicarasagbdcsknpaaietuzjumxfaa","ecdaveavuasiiczleezmzcrzdieipncwohhasayxbjzhkjtaczaasspawmoolyamynaipvjkcabwnajraytsdbbeapumlodufckasbapaealiaadao","adaaacqaqswpjgeamospazizysaniasupxaaeticavwiqavlrodfruaimnayaabciaadvmaahazalxdehblduxdzcawupeafzoldoraaerehaiqakcoxtq","umaaanfadmacztxdqziyxxhpwhrgoaawlspabmyusqmaelmvzgqpjapevfoavjaaotidajrafvvzfkxmkuuyhjkaxwauwahmaubynyhjfinauacazdmytyazuj","tkaaywasncafuprfisaeztaassaiurhfzazdawrvwhtvsopaqqzjxbpaciavmapyjaypaaavacaaalvopsarjwvffaqfaaghsiauamlmjaaajcyidmuzjbjbcrpojw")
sequences_1.m <- as.matrix(sequences_1)
for(i in 1:length(sequences_1.m)) {sequences_1.m[[i]] <- (paste0(sequences_1.m[[i]], "&#x200b;"))}
length(sequences_1)
nchar(sequences_1)
sequences_1_1 <- paste0(sequences_1, "&#x200b;")
sequences_1_1
alets <- rep("a", times=6)
feed <- c(alets, letters)
Round0 <- c("")
sizes <- c(22,90,12,52,34)  #choosin these length randomly is not meaningful because we deliberately want subjects to experience character sequences of different lengths
for (i in 1:5) {Round0[i] <- sample(feed, size=sizes[i], replace=T)}
sample(feed, size=5)
sample(feed, size=5, replace = TRUE)
sample(feed, size=5, replace = TRUE)
sample(c(1,2,3), size=5, replace=T)
paste0(sample(feed, size=5, replace = TRUE))
paste0(sample(feed, size=5, replace = TRUE))
paste(sample(feed, size=5, replace = TRUE), sep="")
samp <- sample(feed, size=5, replace = TRUE)
samp
paste0(samp)
paste(samp, sep="")
paste(samp, collapse="")
paste(sample(feed, size=5, replace = TRUE), collapse="")
for (i in 1:5) {Round0[i] <- paste(sample(feed, size=sizes[i], replace=T), collapse="")}
Round0
grepl("a", Round0)
for (i in 1:5) {grepl("a", Round0[i])}
Solutions0 <- C()
Solutions0
for (i in 1:5) {Solutions0[i] <- sum(grepl("a", Round0[i]))}
Solutions0 <- c(0)
for (i in 1:5) {Solutions0[i] <- sum(grepl("a", Round0[i]))}
Solutions0
gregexpr("a", Round0)
length(gregexpr("a", Round0))
gregexpr("a", Round0)
is.list(gregexpr("a", Round0))
length((gregexpr("a", Round0))[[1]])
Solutions0 <- c(0)
for (i in 1:5) {Solutions0[i] <- length((gregexpr("a", Round0))[[1]])}
Solutions0
for (i in 1:5) {Solutions0[i] <- length((gregexpr("a", Round0))[[i]])}
Solutions0
Round0
Solutions0
cat(Round0, Solutions0, file="Round0.txt")
cat(Round0, Solutions0, file="Round0.txt", sep="" "")
cat(Round0, Solutions0, file="Round0.txt", sep="'" "'")
cat(Round0, Solutions0, file="Round0.txt", sep="' '")
cat(Round0, Solutions0, file="Round0.txt", sep=", ")
cat("var sequences_0 = [", Round0, "]
var solutions_0 = [", Solutions0, "]" file="Round0.txt", sep=", ")
cat("asdf", Round0, Solutions0, "]", file="Round0.txt", sep=", ")
cat("var sequences_0 = [", Round0, "]
var solutions_0 = [", Solutions0, "]", file="Round0.txt", sep=", ")
cat("var sequences_0 = [", Round0, "]
var solutions_0 = [", Solutions0, "]", file="Round0.txt", sep=", ")
cat("var sequences_0 = [", Round0, "]
var solutions_0 = [", Solutions0, "]", file="Round0.txt", sep=",")
Round0
library(data.table)
setwd("C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2003\\07 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data")
setwd("C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2013\\17 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data")
Data.raw <- read.csv("project_2_treat-accessed-2007-06-25-tech_added.csv", header=TRUE, sep=",")
Data.raw <- read.csv("project_2_treat-accessed-2017-06-25-tech_added.csv", header=TRUE, sep=",")
Data.raw <- as.data.table(Data.raw)
colnames(Data.raw)[9] #just to check
D <- Data.raw[ participant._current_page_name == "Thank_you"] #to use only complete obs.
rm <- colnames(D)[c(3:6,8:16)]
D[, c(rm):=NULL]
D[, c(grep("player.sharepc", colnames(D))):=NULL] #removes PROD share displayed in %.
D[, c(grep("player.outputinswitch", colnames(D))):=NULL] #removes timeinswitch/00.
print(oldnames <- colnames(D)[0:9])
print(newnames <- c("S.ID", "CODE","TREBT","G.ID", "PBY", "LBBEL", "LUCK", "EFFORT", "SKILL"))
setnames(D, old=c(oldnames), new=c(newnames))
colnames(D) <- sub("player.avgbelief", "BBVG", colnames(D))
colnames(D) <- sub("player.mostprodBTbelief", "BMBXB", colnames(D))
colnames(D) <- sub("player.mostprodBTbelief", "BMBXB", colnames(D))
colnames(D) <- sub("player.output", "PROD", colnames(D))
colnames(D) <- sub("player.share", "SHARE", colnames(D))
colnames(D) <- sub("player.switchtime", "SWITCH", colnames(D))
colnames(D) <- sub("player.timeinswitch", "CHILL", colnames(D))
colnames(D) <- sub("player.additionaltime", "ADDT", colnames(D))
colnames(D) <- sub("player.totaloutput", "OUTPUT", colnames(D))
length(grep("player.t", colnames(D))) #just a check whether 5+8*30 = 245 (don't do this before above renaming)
colnames(D) <- sub("player.t", "TIME", colnames(D))
colnames(D) <- sub("group.groupoutput", "GPROD", colnames(D))
colnames(D) <- sub("group.id_in_subsession", "GROUP", colnames(D))
colnames(D) <- sub("session.code", "SCODE", colnames(D))
D[, c(grep("player.switch", colnames(D))):=NULL]
D[, c(grep("player.rank", colnames(D))):=NULL]
D[, c(grep("player.payoff", colnames(D))):=NULL] #remove oTree auto-payoff, we don't use it
D[, c(grep("session.", colnames(D))):=NULL]
load(file = "C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2003\\07 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data\\D_cont.RData")
load(file = "C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2013\\17 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data\\D_cont.RData")
load(file = "C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2013\\17 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data\\D_treat.RData")
load(file = "C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2013\\17 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data\\D.RData")
Hernan <- D[,.(LABEL,TREAT,PAY,EFFORT,LUCK,SKILL,PROD,PROD0,PROD1,PROD2,PROD3,PROD4,PROD5,PROD6,PROD7,PROD8)]
write.csv(Hernan, file = "C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2013\\17 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data\\Hernan.csv", row.names = F)
Kathi <- D[,.(LABEL,TREAT,tech1, tech2, tech3, tech4, tech5, tech6, tech7, tech8, PROD,PROD1,PROD2,PROD3,PROD4,PROD5,PROD6,PROD7,PROD8, CHILL, CHILL1, CHILL2, CHILL3, CHILL4, CHILL5, CHILL6, CHILL7, CHILL8, OUTPUT, OUTPUT1, OUTPUT2, OUTPUT3, OUTPUT4, OUTPUT5, OUTPUT6, OUTPUT7, OUTPUT8)]
write.csv(Kathi, file = "C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2013\\17 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data\\Kathi.csv", row.names = F)
KathiBasic <- Kathi
PB <- c()  #Production Basic
PB <- c(PB,KathiBasic[tech1==0 & PROD1>=1][,PROD1])
PB <- c(PB,KathiBasic[tech2==0 & PROD2>=1][,PROD2])
PB <- c(PB,KathiBasic[tech3==0 & PROD3>=1][,PROD3])
PB <- c(PB,KathiBasic[tech4==0 & PROD4>=1][,PROD4])
PB <- c(PB,KathiBasic[tech5==0 & PROD5>=1][,PROD5])
PB <- c(PB,KathiBasic[tech6==0 & PROD6>=1][,PROD6])
PB <- c(PB,KathiBasic[tech7==0 & PROD7>=1][,PROD7])
PB <- c(PB,KathiBasic[tech8==0 & PROD8>=1][,PROD8])
length(PB)
min(PB)
median(PB)
mean(PB)
max(PB)
KathiBasic <- Kathi
PB <- c()  #Production Basic
PB <- c(PB,KathiBasic[tech1==0 & CHILL1>=1][,CHILL1])
PB <- c(PB,KathiBasic[tech2==0 & CHILL2>=1][,CHILL2])
PB <- c(PB,KathiBasic[tech3==0 & CHILL3>=1][,CHILL3])
PB <- c(PB,KathiBasic[tech4==0 & CHILL4>=1][,CHILL4])
PB <- c(PB,KathiBasic[tech5==0 & CHILL5>=1][,CHILL5])
PB <- c(PB,KathiBasic[tech6==0 & CHILL6>=1][,CHILL6])
PB <- c(PB,KathiBasic[tech7==0 & CHILL7>=1][,CHILL7])
PB <- c(PB,KathiBasic[tech8==0 & CHILL8>=1][,CHILL8])
length(PB)
min(PB)
median(PB)
mean(PB)
max(PB)
PB <- c()  #Production Basic
PB <- c(PB,KathiBasic[tech1==0 & CHILL1>0][,CHILL1])
PB <- c(PB,KathiBasic[tech2==0 & CHILL2>0][,CHILL2])
PB <- c(PB,KathiBasic[tech3==0 & CHILL3>0][,CHILL3])
PB <- c(PB,KathiBasic[tech4==0 & CHILL4>0][,CHILL4])
PB <- c(PB,KathiBasic[tech5==0 & CHILL5>0][,CHILL5])
PB <- c(PB,KathiBasic[tech6==0 & CHILL6>0][,CHILL6])
PB <- c(PB,KathiBasic[tech7==0 & CHILL7>0][,CHILL7])
PB <- c(PB,KathiBasic[tech8==0 & CHILL8>0][,CHILL8])
length(PB)
min(PB)
median(PB)
mean(PB)
max(PB)
KathiBasic[tech1==1 & CHILL1>0][,CHILL1]
PB <- c()  #Production Basic
PB <- c(PB,KathiBasic[tech1==1 & CHILL1>0][,CHILL1])
PB <- c(PB,KathiBasic[tech2==1 & CHILL2>0][,CHILL2])
PB <- c(PB,KathiBasic[tech3==1 & CHILL3>0][,CHILL3])
PB <- c(PB,KathiBasic[tech4==1 & CHILL4>0][,CHILL4])
PB <- c(PB,KathiBasic[tech5==1 & CHILL5>0][,CHILL5])
PB <- c(PB,KathiBasic[tech6==1 & CHILL6>0][,CHILL6])
PB <- c(PB,KathiBasic[tech7==1 & CHILL7>0][,CHILL7])
PB <- c(PB,KathiBasic[tech8==1 & CHILL8>0][,CHILL8])
length(PB)
min(PB)
median(PB)
mean(PB)
max(PB)
PB <- c()  #Production Basic
PB <- c(PB,KathiBasic[tech1==1 & OUTPUT1>=1][,OUTPUT1])
PB <- c(PB,KathiBasic[tech2==1 & OUTPUT2>=1][,OUTPUT2])
PB <- c(PB,KathiBasic[tech3==1 & OUTPUT3>=1][,OUTPUT3])
PB <- c(PB,KathiBasic[tech4==1 & OUTPUT4>=1][,OUTPUT4])
PB <- c(PB,KathiBasic[tech5==1 & OUTPUT5>=1][,OUTPUT5])
PB <- c(PB,KathiBasic[tech6==1 & OUTPUT6>=1][,OUTPUT6])
PB <- c(PB,KathiBasic[tech7==1 & OUTPUT7>=1][,OUTPUT7])
PB <- c(PB,KathiBasic[tech8==1 & OUTPUT8>=1][,OUTPUT8])
length(PB)
min(PB)
median(PB)
mean(PB)
max(PB)
PB <- c()  #Production Basic
PB <- c(PB,KathiBasic[tech1==0 & OUTPUT1>=1][,OUTPUT1])
PB <- c(PB,KathiBasic[tech2==0 & OUTPUT2>=1][,OUTPUT2])
PB <- c(PB,KathiBasic[tech3==0 & OUTPUT3>=1][,OUTPUT3])
PB <- c(PB,KathiBasic[tech4==0 & OUTPUT4>=1][,OUTPUT4])
PB <- c(PB,KathiBasic[tech5==0 & OUTPUT5>=1][,OUTPUT5])
PB <- c(PB,KathiBasic[tech6==0 & OUTPUT6>=1][,OUTPUT6])
PB <- c(PB,KathiBasic[tech7==0 & OUTPUT7>=1][,OUTPUT7])
PB <- c(PB,KathiBasic[tech8==0 & OUTPUT8>=1][,OUTPUT8])
length(PB)
min(PB)
median(PB)
mean(PB)
max(PB)
################################################################################
##########             DATA ANALYSIS MERITOCRACY PROJECT              ##########
################################################################################
# if necessary, please install the following packages:
# install.packages("data.table")
# install.packages("ggplot2")
library(data.table); library(ggplot2); library(reshape2)
#Set working directory: setwd("C:\\...\\Project 2\\Data\\VCEE lab testing yyyy-mm-dd")
setwd("C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2013\\17 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data")
#loading D.RData file created in DATA CLEAN-UP: load(file = "C:\\...\\D.RData")
load(file = "C:\\Users\\Georg\\OneDrive\\Studium\\VWL-Master curr 2013\\17 S\\Designing and Implementing an Economic Experiment\\Moodle\\Project 2\\Data\\Project-2-Data\\D.RData")
########****************************************************************########
########                     DESCRIPTIVE STATISTICS                     ########
########****************************************************************########
### Check of RET ####
t1 <- c(grep("TIME1", colnames(D)))
t2 <- c(grep("TIME2", colnames(D)))
# old version: ugly matplot:
# T1 <- D[, t1, with=F]
# matplot(1:ncol(T1), t(T1), type = "l")
# new version: nice ggplot
df2 <- as.data.frame(t(D[, t2, with=F]))   #apparently data.table not so good
colnames(df2) <- paste0("Subject ", 1:ncol(df2))
df2_long <- melt(df2) #here I use reshape2 package to bring data into long format, better for graphing
names(df2_long)[1:2] <- c("Subjects", "Time")
df2_long$Sequence <- 1:nrow(df2)
ggplot(df1_long, aes(Sequence, Time, colour = Subjects)) +
geom_line() +
ggtitle("Basic Technology") +
coord_cartesian(ylim=c(0,25)) +
geom_abline(slope = 0, intercept = 10, colour = "red", size=1)  #individually optimal switching point
### Development of Subjects ####
## OUTPUT Development
o <- c(grep("OUTPUT", colnames(D)))
o <- o[2:length(o)]
O <- as.data.frame(t(D[, o, with=F]))
colnames(O) <- paste0("Subject ", 1:ncol(O))
O_long <- melt(O)
names(O_long)[1:2] <- c("Subjects", "Output")
O_long$Round <- 1:nrow(O)
ggplot(O_long, aes(Round, Output, color = Subjects)) +
geom_line() +
geom_vline(xintercept = 2.5, color = "red")
# ORANK (Rank resulting from counting and switch earnings)
OR <- O
for (i in 1:8) {OR[i,] <- rank(-OR[i,], ties.method = "min")}
rownames(OR) <- paste0("ORANK", 1:nrow(OR))
OR_long <- melt(OR)
names(OR_long)[1:2] <- c("Subjects", "Output_Rank")
OR_long$Round <- 1:nrow(OR)
ggplot(OR_long, aes(Round, Output_Rank, color = Subjects)) +
geom_line() +
geom_vline(xintercept = 2.5, color = "red")
## PROD Development
p <- c(grep("^PROD", colnames(D)))  #^ is to omit GPROD
p <- p[3:length(p)]  #get rid of PROD (total) and PROD0 (trial)
P <- as.data.frame(t(D[, p, with=F]))
colnames(P) <- paste0("Subject ", 1:ncol(P))
P_long <- melt(P)
names(P_long)[1:2] <- c("Subjects", "Production")
P_long$Round <- 1:nrow(P)
ggplot(P_long, aes(Round, Production, color = Subjects)) +
geom_line() +
geom_vline(xintercept = 2.5, color = "red")
# PRANK (rank resulting from counting only)
# ORANK (Rank resulting from counting and switch earnings)
PR <- P
for (i in 1:8) {PR[i,] <- rank(-PR[i,], ties.method = "min")}
rownames(PR) <- paste0("PRANK", 1:nrow(PR))
PR_long <- melt(PR)
names(PR_long)[1:2] <- c("Subjects", "Production_Rank")
PR_long$Round <- 1:nrow(PR)
ggplot(PR_long, aes(Round, Production_Rank, color = Subjects)) +
geom_line() +
geom_vline(xintercept = 2.5, color = "red")
### More Stuff ####
## Check Fatigue effects
#plot PROD1-PROD8|BasicTech and ...|AdvancedTech
## more yet to come: eg. average PROD, time over sequence length, ...
########****************************************************************########
########                        HYPOTHESES TESTING                      ########
########****************************************************************########
######--------------------------------------------------------------------######
######                 H1: EFFORT HIGHER IN COMPETITION                   ######
######--------------------------------------------------------------------######
# H1: Subjects exert more effort in a competitive setting compared to an
#     individual setting.
# Issue: How to measure Effort??
#  -) Number of solved strings.
#  -) Time spent solving the last string
#      expected to be longer in competitive stage compared to base rate, where
#      subjects are expected to switch optimally after 10sec or longer.
# z_Last_i ^(Comp)  >  z_Last^(Base)_i
# Number of solved strings
x <- D[, c(grep("TIME1", colnames(D))), with=0]
y <- x[1]
for (i in 1:nrow(x)) {}
tail(x[x!=0], 1)
D[, paste0("OVERTIME", i := ] #Creates columns OVERTIME1,...,OVERTIME8
#you can avg this over t=1,2 and t=3-7 (t=8 is special)
#OVERTIMEAVG <- mean(OVERTIME3-8)
#avg over all participants, groups
#
#INFO - NOINFO einzeln anschauen und die Diffs vergleichen.
#Runden einzeln anschauen
#
#So avg. over A,B,...,E  z_last_i=[3-8] vs. z_last_i=[1,2]
#will yield only very few observations.
#non-parametric test. eg Wilcoxon test.
# Wilcoxon-Mann-Whithney-Test:
wilcox.test()
######--------------------------------------------------------------------######
######                  H2:MORE PRODUCTION IN TREATMENT                   ######
######--------------------------------------------------------------------######
# H2: Subjects exert more effort more, when provided with feedback about
#     competitors' performances.
# H2a: Groups produce more when subjects are provided with feedback about
#      competitors' performances.
#      - if no effect, than the more is ~N
#      -Test by
#     i.e. More OVERTIME4-8 in TREAT compared to CONT.
# same effort measure as used for H1.
# with INFO higher over exertion starting t=4.
# following path depends then on closeness. See H2A
######--------------------------------------------------------------------######
######          H3: GROUP INEQUALITY ON (over-exertion of) PROD           ######
######--------------------------------------------------------------------######
# H3: Group production is higher in groups with less inequality.
#     i.e. if race is closer, there is stronger competition
#Test this using only TREAT observations.
#INEQU <- Gini#  ...within group inequality in round # = 4,...,8 over PROD# or OUTPUT#
#   regression: GPROD# = alpha*INEQU# + controls + epsilon
#     controls:
# Expectations: alpha < 0 (i.e. more Inequality leads to lower overall production)
######--------------------------------------------------------------------######
######              H4: PERCEPTION OF LUCK BY INCOME STATUS               ######
######--------------------------------------------------------------------######
# H4: Perception of luck depends negatively on overall earnings.
#     i.e. Subjects with worse performance consider luck more important in
#          determining overall earnings.
#   regression: LUCK = alpha*PAY + controls + epsilon
#     controls: RANK, RANK8, (most salient in mind), LAST8, INEQU, INEQU8
# Expectations: alpha < 0 (worse performers give Luck more importance)
#               RANK < 0 (-"-, might be additional driver of Luck perception)
#               LAST > 0 (last place holders consider luck even more important)
#               INEQU unclear
######--------------------------------------------------------------------######
###      H5: AVG TIME PER STRING increases when INFO         ###
######--------------------------------------------------------------------######
# avg time needed to solve sequence s, w/ and w/o INFO,
# cf. Eriksson et al.
p <- c(grep("^PROD", colnames(D_cont)))  #^ is to omit GPROD
p <- p[3:length(p)]  #get rid of PROD (total) and PROD0 (trial)
P <- as.data.frame(t(D_cont[, p, with=F]))
colnames(P) <- paste0("Subject ", 1:ncol(P))
P_long <- melt(P)
names(P_long)[1:2] <- c("Subjects", "Production")
P_long$Round <- 1:nrow(P)
ggplot(P_long, aes(Round, Production, color = Subjects)) +
geom_line() +
geom_vline(xintercept = 2.5, color = "red")
# PRANK (rank resulting from counting only)
# ORANK (Rank resulting from counting and switch earnings)
PR <- P
for (i in 1:8) {PR[i,] <- rank(-PR[i,], ties.method = "min")}
rownames(PR) <- paste0("PRANK", 1:nrow(PR))
PR_long <- melt(PR)
names(PR_long)[1:2] <- c("Subjects", "Production_Rank")
PR_long$Round <- 1:nrow(PR)
ggplot(PR_long, aes(Round, Production_Rank, color = Subjects)) +
geom_line() +
geom_vline(xintercept = 2.5, color = "red")
PR <- P
for (i in 1:8) {PR[i,] <- rank(-PR[i,], ties.method = "min")}
rownames(PR) <- paste0("PRANK", 1:nrow(PR))
PR_long <- melt(PR)
names(PR_long)[1:2] <- c("Subjects", "Production_Rank")
PR_long$Round <- 1:nrow(PR)
ggplot(PR_long, aes(Round, Production_Rank, color = Subjects)) +
geom_line() +
ggtitle("Production Ranking Control Group") +
geom_vline(xintercept = 2.5, color = "red")
